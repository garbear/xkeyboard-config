if test "yes" = "yes"; then
cross_compiling=yes
host=armv7a-cros-linux-gnueabi
host_alias=armv7a-cros-linux-gnueabi
fi

LD="/home/garrett/Documents/steamlink-sdk/toolchain/bin/armv7a-cros-linux-gnueabi-ld"
CC="/usr/bin/ccache /home/garrett/Documents/steamlink-sdk/toolchain/bin/armv7a-cros-linux-gnueabi-gcc"
CXX="/usr/bin/ccache /home/garrett/Documents/steamlink-sdk/toolchain/bin/armv7a-cros-linux-gnueabi-g++"
CPP="/usr/bin/ccache /home/garrett/Documents/steamlink-sdk/toolchain/bin/armv7a-cros-linux-gnueabi-gcc -E"
AR="/home/garrett/Documents/steamlink-sdk/toolchain/bin/armv7a-cros-linux-gnueabi-ar"
AS="/home/garrett/Documents/steamlink-sdk/toolchain/bin/armv7a-cros-linux-gnueabi-as"
NM="/home/garrett/Documents/steamlink-sdk/toolchain/bin/armv7a-cros-linux-gnueabi-nm"
STRIP="/home/garrett/Documents/steamlink-sdk/toolchain/bin/armv7a-cros-linux-gnueabi-strip"
RANLIB="/home/garrett/Documents/steamlink-sdk/toolchain/bin/armv7a-cros-linux-gnueabi-ranlib"
OBJDUMP="/home/garrett/Documents/steamlink-sdk/toolchain/bin/armv7a-cros-linux-gnueabi-objdump"

if test "linux" = "ios" ; then
  export AS="/home/garrett/Documents/steamlink-sdk/kodi-deps/x86_64-linux-gnu-native/bin/gas-preprocessor.pl /usr/bin/ccache /home/garrett/Documents/steamlink-sdk/toolchain/bin/armv7a-cros-linux-gnueabi-gcc -arch armv7a"
  export CCAS="--tag CC /home/garrett/Documents/steamlink-sdk/kodi-deps/x86_64-linux-gnu-native/bin/gas-preprocessor.pl /usr/bin/ccache /home/garrett/Documents/steamlink-sdk/toolchain/bin/armv7a-cros-linux-gnueabi-gcc -arch armv7a"
fi

CFLAGS="--sysroot=/home/garrett/Documents/steamlink-sdk/toolchain/../rootfs -marm -mfpu=neon -mfloat-abi=hard -DEGL_API_FB -O0 -g -D_DEBUG   -isystem /home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/include $CFLAGS"
LDFLAGS="-L/home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/lib -L/home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/lib64 -static-libgcc -static-libstdc++ -lstdc++   $LDFLAGS"
CXXFLAGS="-std=c++11 --sysroot=/home/garrett/Documents/steamlink-sdk/toolchain/../rootfs -marm -mfpu=neon -mfloat-abi=hard -DEGL_API_FB -O0 -g -D_DEBUG   -isystem /home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/include $CXXFLAGS"
CPPFLAGS="--sysroot=/home/garrett/Documents/steamlink-sdk/toolchain/../rootfs -marm -mfpu=neon -mfloat-abi=hard -DEGL_API_FB -O0 -g -D_DEBUG   -isystem /home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/include $CPPFLAGS"

export PKG_CONFIG=/home/garrett/Documents/steamlink-sdk/kodi-deps/x86_64-linux-gnu-native/bin/pkg-config
export PKG_CONFIG_LIBDIR=/home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/lib/pkgconfig
export YASM=/home/garrett/Documents/steamlink-sdk/kodi-deps/x86_64-linux-gnu-native/bin/yasm
export NASM=/home/garrett/Documents/steamlink-sdk/kodi-deps/x86_64-linux-gnu-native/bin/yasm
LIBGCRYPT_CONFIG=/home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/bin/libgcrypt-config

PATH=/home/garrett/Documents/steamlink-sdk/kodi-deps/x86_64-linux-gnu-native/bin:/home/garrett/Documents/steamlink-sdk/toolchain/usr/bin:/home/garrett/Documents/steamlink-sdk/toolchain/bin:$PATH
LD_LIBRARY_PATH=/home/garrett/Documents/steamlink-sdk/kodi-deps/x86_64-linux-gnu-native/lib:$LD_LIBRARY_PATH

PYTHON_VERSION=2.7
PYTHON_LDFLAGS="-L/home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/lib -L/home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/lib64 -lpython${PYTHON_VERSION} -lc -ldl -lm -lexpat -lffi -lintl -lutil -lssl -lcrypto"
PYTHON_CPPFLAGS=-I/home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/include/python${PYTHON_VERSION}
PYTHON_SITE_PKG=/home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/lib/python${PYTHON_VERSION}/site-packages
PYTHON_NOVERSIONCHECK=no-check
NATIVE_ROOT=/home/garrett/Documents/steamlink-sdk/kodi-deps/x86_64-linux-gnu-native

#libomxil-bellagio
ac_cv_func_malloc_0_nonnull=yes

#curl
ac_cv_file__dev_urandom=yes
ac_cv_lib_ssl_SSL_connect=yes

#gettext and libiconv
gl_cv_header_working_stdint_h=yes

#libcec
ac_cv_search_dlopen=-ldl

#libgcrypt
if test "${PACKAGE_NAME}" = "libgcrypt"; then
  ac_cv_path_GPG_ERROR_CONFIG=/home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/bin/gpg-error-config
  ac_cv_sys_symbol_underscore=no
  CFLAGS="$CFLAGS -std=gnu99"
fi

#python
ac_cv_func_gethostbyname_r=no
ac_cv_header_sys_un_h=yes
ac_cv_file__dev_ptmx=no
ac_cv_file__dev_ptc=no

#gnutls
gl_cv_func_gettimeofday_clobber=no


#samba
SMB_BUILD_CC_NEGATIVE_ENUM_VALUES=yes
samba_cv_CC_NEGATIVE_ENUM_VALUES=yes
libreplace_cv_HAVE_C99_VSNPRINTF=yes
samba_cv_HAVE_C99_VSNPRINTF=yes
ac_cv_header_standards_h=no

ac_cv_file__proc_sys_kernel_core_pattern=no
samba_cv_SYSCONF_SC_NPROCESSORS_ONLN=no
libreplace_cv_HAVE_GETADDRINFO=no

if test "${PACKAGE_NAME}" = "Samba" -a "linux" = "ios"; then
  # disable python support
  export PYTHON_VER=0.0
  if test "armv7a" != "arm64"; then
    # ios/osx-10.6 issue with collision of _MD5 exported from a system lib
    export LDFLAGS="${LDFLAGS} -Wl,-unexported_symbol,_MD5* -lc"
  fi
  samba_cv_HAVE_IFACE_GETIFADDRS=yes
fi

if test "${PACKAGE_NAME}" = "Samba" -a "linux" = "osx"; then
  # disable python support
  export PYTHON_VER=0.0
  # ios/osx-10.6 issue with collision of _MD5 exported from a system lib
  export LDFLAGS="${LDFLAGS} -Wl,-unexported_symbol,_MD5* -lc"
  # uses OPT instead of CFLAGS
  export OPT="${CFLAGS}"
  # various configure overrides
  ac_cv_header_libunwind_h=no
  ac_cv_header_execinfo_h=no
  samba_cv_HAVE_IFACE_GETIFADDRS=yes
fi

if test "linux" = "android"; then
  #samba
  SMB_BUILD_CC_NEGATIVE_ENUM_VALUES=yes
  libreplace_cv_READDIR_GETDIRENTRIES=no
  libreplace_cv_READDIR_GETDENTS=no
  libreplace_cv_HAVE_IFACE_IFCONF=yes
  libreplace_cv_HAVE_MMAP=yes
  libreplace_cv_HAVE_GETTIMEOFDAY_TZ=yes
  libreplace_cv_HAVE_SECURE_MKSTEMP=yes

  samba_cv_REPLACE_READDIR=no
  samba_cv_HAVE_WRFILE_KEYTAB=yes
  samba_cv_HAVE_GETTIMEOFDAY_TZ=yes
  samba_cv_USE_SETREUID=yes
  samba_cv_HAVE_KERNEL_OPLOCKS_LINUX=yes
  samba_cv_HAVE_IFACE_IFCONF=yes
  samba_cv_HAVE_MMAP=yes
  samba_cv_HAVE_FCNTL_LOCK=yes
  samba_cv_HAVE_SECURE_MKSTEMP=yes
  samba_cv_CC_NEGATIVE_ENUM_VALUES=yes
  samba_cv_fpie=no
  samba_cv_have_longlong=yes
  samba_cv_HAVE_OFF64_T=yes
  samba_cv_HAVE_UT_UT_TYPE=no
  ac_cv_func_srand=yes
  ac_cv_func_rand=yes

  #python: android doesn't have libutil
  PYTHON_LDFLAGS="-L/home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/lib -L/home/garrett/Documents/steamlink-sdk/kodi-deps/armv7a-cros-linux-gnueabi-debug/lib64 -lpython${PYTHON_VERSION} -lc -ldl -lm -lexpat -lffi -lintl -lssl -lcrypto"

fi

if test "linux" = "osx" ; then
  # Xcode 8 + 10.11, clock_gettime and getentropy is present
  # in 10.12 but will get wrongly detected if building on 10.11
  ac_cv_search_clock_gettime=no
  ac_cv_func_clock_gettime=no
  ac_cv_func_getentropy=no
fi


if test "linux" = "ios"; then
  # Xcode 8 + 10.11, clock_gettime and getentropy is present
  # in 10.12 but will get wrongly detected if building on 10.11
  ac_cv_search_clock_gettime=no
  ac_cv_func_clock_gettime=no
  ac_cv_func_getentropy=no

  # tweaks for libffi
  if test "${PACKAGE_NAME}" = "libffi" ; then
    if test "armv7a" = "arm64"; then
      host_alias=aarch64-apple-darwin
    fi
  fi

  # tweaks for flac
  if test "${ac_unique_file}" = "src/flac/main.c" ; then
    # compiler barfs if we use -O3/O2 for flac
    export CFLAGS=`echo ${CFLAGS} | sed 's/-O3/-Os/'`
    export CPPFLAGS=`echo ${CPPFLAGS} | sed 's/-O3/-Os/'`
  fi
fi

#Fix for older, broken android toolchains
if test "${PACKAGE_NAME}" = "FreeType" -a "linux" = "android"; then
  CFLAGS="$CFLAGS -std=gnu99"
fi

# These libs do not correctly export their symbols. Force them in case
# -fvisibility=hidden is set.
if test "${ac_unique_file}" = "src/flac/main.c" || \
   test "${ac_unique_file}" = "src/framing.c" || \
   test "${ac_unique_file}" = "src/libdvdcss.c" || \
   test "${PACKAGE_NAME}" = "libssh2" ; then
     CFLAGS="$CFLAGS -fvisibility=default"
fi
